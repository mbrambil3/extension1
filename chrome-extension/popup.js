// JavaScript para o popup da extens√£o
document.addEventListener('DOMContentLoaded', function() {
    loadSettings();
    setupEventListeners();
});

// Carregar configura√ß√µes salvas
function loadSettings() {
    chrome.runtime.sendMessage({ action: "getSettings" }, (response) => {
        if (response) {
            // Configurar toggle de resumo autom√°tico
            document.getElementById('autoSummary').checked = response.settings.autoSummary;
            
            // Configurar idioma
            document.getElementById('language').value = response.settings.language;
            
            // Configurar n√≠vel de detalhe
            document.getElementById('detailLevel').value = response.settings.detailLevel;
            
            // Atualizar status da extens√£o
            updateStatusIndicator(response.isActive);
        }
    });
}

// Configurar event listeners
function setupEventListeners() {
    // Toggle de resumo autom√°tico
    document.getElementById('autoSummary').addEventListener('change', function() {
        saveSettings();
    });
    
    // Seletor de idioma
    document.getElementById('language').addEventListener('change', function() {
        saveSettings();
    });
    
    // Seletor de n√≠vel de detalhe
    document.getElementById('detailLevel').addEventListener('change', function() {
        saveSettings();
    });
    
    // Bot√£o para gerar resumo agora
    document.getElementById('generateNow').addEventListener('click', function() {
        generateSummaryNow();
    });
    
    // Bot√£o para testar conex√£o API
    document.getElementById('testConnection').addEventListener('click', function() {
        testAPIConnection();
    });
}

// Salvar configura√ß√µes
function saveSettings() {
    const settings = {
        autoSummary: document.getElementById('autoSummary').checked,
        language: document.getElementById('language').value,
        detailLevel: document.getElementById('detailLevel').value
    };
    
    chrome.runtime.sendMessage({
        action: "updateSettings",
        isActive: true,
        settings: settings
    }, (response) => {
        if (response && response.success) {
            showToast('Configura√ß√µes salvas!', 'success');
        } else {
            showToast('Erro ao salvar configura√ß√µes', 'error');
        }
    });
}

// Gerar resumo manualmente
function generateSummaryNow() {
    const button = document.getElementById('generateNow');
    button.classList.add('loading');
    button.textContent = 'Gerando...';
    
    // Enviar mensagem para a aba ativa
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
        if (tabs[0]) {
            chrome.tabs.sendMessage(tabs[0].id, {
                action: "generateSummary",
                manual: true
            }, function(response) {
                button.classList.remove('loading');
                button.textContent = 'üéØ Gerar Resumo Agora';
                
                if (response && response.received) {
                    showToast('Resumo sendo gerado...', 'success');
                    // Fechar popup ap√≥s iniciar o processo
                    setTimeout(() => window.close(), 1000);
                } else {
                    showToast('Erro ao comunicar com a p√°gina', 'error');
                }
            });
        } else {
            button.classList.remove('loading');
            button.textContent = 'üéØ Gerar Resumo Agora';
            showToast('Nenhuma aba ativa encontrada', 'error');
        }
    });
}

// Testar conex√£o com a API
function testAPIConnection() {
    const button = document.getElementById('testConnection');
    button.classList.add('loading');
    button.textContent = 'Testando...';
    
    // Texto de teste simples
    const testText = 'Este √© um teste de conex√£o com a API do Gemini para verificar se a extens√£o Auto-Summarizer est√° funcionando corretamente.';
    
    chrome.runtime.sendMessage({
        action: "generateSummary",
        text: testText
    }, function(response) {
        button.classList.remove('loading');
        button.textContent = 'üîó Testar Conex√£o API';
        
        if (response && response.success) {
            showToast('Conex√£o OK! API funcionando', 'success');
        } else {
            showToast('Erro na conex√£o: ' + (response?.error || 'Desconhecido'), 'error');
        }
    });
}

// Atualizar indicador de status
function updateStatusIndicator(isActive) {
    const statusDot = document.querySelector('.status-dot');
    const statusText = document.querySelector('.status-text');
    
    if (isActive) {
        statusDot.classList.remove('inactive');
        statusDot.classList.add('active');
        statusText.textContent = 'Extens√£o Ativa';
    } else {
        statusDot.classList.remove('active');
        statusDot.classList.add('inactive');
        statusText.textContent = 'Extens√£o Inativa';
    }
}

// Mostrar toast de notifica√ß√£o
function showToast(message, type = 'success') {
    const container = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    
    container.appendChild(toast);
    
    // Animar entrada
    setTimeout(() => {
        toast.classList.add('show');
    }, 100);
    
    // Remover ap√≥s 3 segundos
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            if (container.contains(toast)) {
                container.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// Capturar erros de runtime do Chrome
chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {
    if (message.action === "showToast") {
        showToast(message.text, message.type);
    }
});

// Verificar se a extens√£o ainda est√° ativa quando o popup √© aberto
document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        loadSettings(); // Recarregar configura√ß√µes quando o popup volta a ficar vis√≠vel
    }
});